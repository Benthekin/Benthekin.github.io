<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2D Platformer with Falling Spikes, Lives, Score, and Enemy</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #87CEEB;
        }

        canvas {
            border: 2px solid black;
        }

        .controls {
            position: fixed;
            bottom: 20px;
            left: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .button {
            width: 50px;
            height: 50px;
            background-color: #4CAF50;
            margin: 5px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            font-size: 20px;
            color: white;
        }

        .lives, .score {
            position: fixed;
            top: 20px;
            font-size: 24px;
            color: #000;
        }

        .score {
            right: 20px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="400"></canvas>

    <div class="controls">
        <div id="left" class="button">←</div>
        <div id="right" class="button">→</div>
        <div id="jump" class="button">↑</div>
    </div>

    <div class="lives" id="livesDisplay">Lives: 3</div>
    <div class="score" id="scoreDisplay">Score: 0</div>

    <script>
        // Basic setup
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        const GRAVITY = 0.5;
        const JUMP_STRENGTH = 12;
        const MOVE_SPEED = 5;
        const SPIKE_FALL_SPEED = 3;
        let lives = 3; // Player starts with 3 lives
        let score = 0; // Initialize score

        let keys = { left: false, right: false, jump: false };
        let spikes = []; // Array to hold spikes

        const player = {
            x: canvas.width / 2 - 25, // Start in the center of the screen
            y: 300,
            width: 50,
            height: 50,
            velocityX: 0,
            velocityY: 0,
            grounded: false,
        };

        // Ground level
        const ground = {
            x: 0,
            y: 350,
            width: canvas.width,
            height: 50
        };

        // Enemy setup
        const enemy = {
            x: 20,          // Enemy starts on the left side of the screen
            y: ground.y - 30, // Position just above the ground
            width: 40,
            height: 40,
            velocityX: 2,     // Speed at which the enemy moves horizontally
            movingRight: true, // Direction flag to move the enemy back and forth
        };

        // Event listeners for mobile controls
        document.getElementById('left').addEventListener('touchstart', () => { keys.left = true; });
        document.getElementById('left').addEventListener('touchend', () => { keys.left = false; });
        
        document.getElementById('right').addEventListener('touchstart', () => { keys.right = true; });
        document.getElementById('right').addEventListener('touchend', () => { keys.right = false; });

        document.getElementById('jump').addEventListener('touchstart', () => { keys.jump = true; });
        document.getElementById('jump').addEventListener('touchend', () => { keys.jump = false; });

        // Create a new spike (now upside-down triangles)
        function spawnSpike() {
            const spike = {
                x: Math.random() * (canvas.width - 20),
                y: -20,
                width: 20,
                height: 20
            };
            spikes.push(spike);
        }

        // Reset the game state
        function resetGame() {
            if (lives > 0) {
                player.x = canvas.width / 2 - 25;
                player.y = 300;
                player.velocityX = 0;
                player.velocityY = 0;
                player.grounded = false;
                spikes = [];
                enemy.x = 20; // Reset enemy position to left side
            } else {
                // If no lives left, restart the game completely
                lives = 3;
                score = 0;
                document.getElementById('livesDisplay').innerText = `Lives: ${lives}`;
                document.getElementById('scoreDisplay').innerText = `Score: ${score}`;
                resetGame();
            }
        }

        // Increment score every second
        setInterval(() => {
            if (lives > 0) {
                score += 1;
                document.getElementById('scoreDisplay').innerText = `Score: ${score}`;
            }
        }, 1000);

        // Game loop and physics
        function gameLoop() {
            updatePlayer();
            updateSpikes();
            updateEnemy();
            detectCollisions();
            render();
            requestAnimationFrame(gameLoop);
        }

        function updatePlayer() {
            // Reset horizontal velocity if no movement is happening
            if (!keys.left && !keys.right) {
                player.velocityX = 0; // Stop horizontal movement when no button is pressed
            }

            if (keys.left) player.velocityX = -MOVE_SPEED;
            if (keys.right) player.velocityX = MOVE_SPEED;

            if (keys.jump && player.grounded) {
                player.velocityY = -JUMP_STRENGTH;
                player.grounded = false;
            }

            player.velocityY += GRAVITY; // Apply gravity

            player.x += player.velocityX;
            player.y += player.velocityY;

            // Prevent player from moving off-screen (wall collisions)
            if (player.x < 0 || player.x + player.width > canvas.width) {
                lives -= 1; // Lose a life if player hits the wall
                document.getElementById('livesDisplay').innerText = `Lives: ${lives}`;
                resetGame(); // Reset game if player touches the walls
            }

            // Apply ground collision
            if (player.y + player.height > ground.y) {
                player.y = ground.y - player.height;
                player.velocityY = 0;
                player.grounded = true;
            }
        }

        function updateSpikes() {
            for (let i = 0; i < spikes.length; i++) {
                spikes[i].y += SPIKE_FALL_SPEED;

                // Remove spikes that have fallen off the screen
                if (spikes[i].y > canvas.height) {
                    spikes.splice(i, 1);
                    i--;
                }
            }

            // Randomly spawn spikes more frequently (every 50 frames instead of 100)
            if (Math.random() < 0.05) { // Increased chance of spikes falling
                spawnSpike();
            }
        }

        function updateEnemy() {
            // Move the enemy back and forth
            if (enemy.movingRight) {
                enemy.x += enemy.velocityX;
                if (enemy.x + enemy.width >= canvas.width - 20) {
                    enemy.movingRight = false; // Change direction when hitting right side
                }
            } else {
                enemy.x -= enemy.velocityX;
                if (enemy.x <= 20) {
                    enemy.movingRight = true; // Change direction when hitting left side
                }
            }
        }

        function detectCollisions() {
            // Collision with ground
            if (player.y + player.height > ground.y) {
                player.y = ground.y - player.height;
                player.velocityY = 0;
                player.grounded = true;
            }

            // Check collision with spikes
            for (let i = 0; i < spikes.length; i++) {
                if (isCollision(player, spikes[i])) {
                    lives -= 1; // Lose a life if player hits a spike
                    document.getElementById('livesDisplay').innerText = `Lives: ${lives}`;
                    resetGame();  // Reset game if spike hits player
                }
            }

            // Check collision with enemy
            if (isCollision(player, enemy)) {
                lives -= 1; // Lose a life if player touches the enemy
                document.getElementById('livesDisplay').innerText = `Lives: ${lives}`;
                resetGame();  // Reset game if player hits enemy
            }
        }

        function isCollision(player, obj) {
            // General collision detection (AABB - Axis Aligned Bounding Box)
            return player.x < obj.x + obj.width &&
                   player.x + player.width > obj.x &&
                   player.y < obj.y + obj.height &&
                   player.y + player.height > obj.y;
        }

        // Function to draw the blocky, smiling face (smile higher and make it smaller)
        function drawSmilingFace(x, y, width, height) {
            // Draw the face (head)
            ctx.fillStyle = "#FFD700"; // Yellow face
            ctx.fillRect(x + 5, y + 5, width - 10, height - 10); // Face rectangle

            // Draw eyes
            ctx.fillStyle = "#000"; // Black for eyes
            ctx.beginPath();
            ctx.arc(x + 15, y + 15, 5, 0, Math.PI * 2, true); // Left eye
            ctx.arc(x + width - 15, y + 15, 5, 0, Math.PI * 2, true); // Right eye
            ctx.fill();

            // Draw mouth higher up and smaller
            ctx.beginPath();
            ctx.arc(x + width / 2, y + height - 20, 10, 0, Math.PI, false); // Smiling mouth higher and smaller
            ctx.lineWidth = 3;
            ctx.strokeStyle = "#000";
            ctx.stroke();
        }

        // Function to draw the angry face (for the enemy)
        function drawAngryFace(x, y, width, height) {
            // Draw the face (head)
            ctx.fillStyle = "#FF6347"; // Red enemy face
            ctx.fillRect(x + 5, y + 5, width - 10, height - 10); // Face rectangle

            // Draw angry eyes (tilted)
            ctx.fillStyle = "#000"; // Black for eyes
            ctx.beginPath();
            ctx.moveTo(x + 15, y + 15); 
            ctx.lineTo(x + 10, y + 20); // Left eye (angry)
            ctx.lineTo(x + 20, y + 20);
            ctx.closePath();
            ctx.fill();

            ctx.beginPath();
            ctx.moveTo(x + width - 15, y + 15); 
            ctx.lineTo(x + width - 10, y + 20); // Right eye (angry)
            ctx.lineTo(x + width - 20, y + 20);
            ctx.closePath();
            ctx.fill();

            // Draw a frown (mouth)
            ctx.beginPath();
            ctx.arc(x + width / 2, y + height - 10, 10, Math.PI, 0, true); // Frown
            ctx.lineWidth = 3;
            ctx.strokeStyle = "#000";
            ctx.stroke();
        }

        // Function to draw the spikes as upside-down triangles
        function drawSpike(x, y, width, height) {
            ctx.fillStyle = '#808080'; // Grey color for spikes
            ctx.beginPath();
            ctx.moveTo(x, y); // Starting point of the triangle (left point)
            ctx.lineTo(x + width, y); // Right point of the triangle
            ctx.lineTo(x + width / 2, y + height); // Bottom point of the triangle (center of the base)
            ctx.closePath();
            ctx.fill();
        }

        // Function to draw the enemy
        function drawEnemy(x, y, width, height) {
            drawAngryFace(x, y, width, height); // Draw enemy with angry face
        }

        function render() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw ground
            ctx.fillStyle = '#228B22';
            ctx.fillRect(ground.x, ground.y, ground.width, ground.height);

            // Draw player with smiling face
            drawSmilingFace(player.x, player.y, player.width, player.height);

            // Draw spikes as upside-down triangles
            for (let spike of spikes) {
                drawSpike(spike.x, spike.y, spike.width, spike.height);
            }

            // Draw the enemy
            drawEnemy(enemy.x, enemy.y, enemy.width, enemy.height);
        }

        // Start the game loop
        gameLoop();
    </script>
</body>
</html>
